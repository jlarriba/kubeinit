---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


#
# "kubeinit_ooonextgen" tasks
#

- name: Run the deployment tasks in each extra node (those extra nodes having the 'nova' string)
  block:

    - name: Install CentOS based OpenStack dependencies
      ansible.builtin.package:
        name: "{{ kubeinit_ooonextgen_dependencies }}"
        state: present

    - name: Create the stack user
      ansible.builtin.shell: |
        set -o pipefail

        sudo useradd stack
        echo "stack:stack" | sudo chpasswd
        echo "stack ALL=(root) NOPASSWD:ALL" \
          | sudo tee /etc/sudoers.d/stack
        sudo chmod 0440 /etc/sudoers.d/stack
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Install repos and packages
      ansible.builtin.shell: |
        set -o pipefail

        url=https://trunk.rdoproject.org/centos9/component/tripleo/current/
        rpm_name=$(curl $url | grep python3-tripleo-repos | sed -e 's/<[^>]*>//g' | awk 'BEGIN { FS = ".rpm" } ; { print $1 }')
        rpm=$rpm_name.rpm
        dnf install -y $url$rpm
        tripleo-repos current-tripleo-dev
        dnf install -y python3-tripleoclient
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"

    - name: Update packages
      ansible.builtin.package:
        name: "*"
        state: latest

    - name: Reboot immediately after the package update
      ansible.builtin.shell: "reboot"
      args:
        executable: /bin/bash
      async: 1
      poll: 0
      changed_when: true

    - name: "Wait for to boot: {{ kubeinit_deployment_node_name }}"
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 30
        timeout: 60

    - name: Create the OOO templates
      ansible.builtin.shell: |
        set -o pipefail

        openstack tripleo container image prepare default --output-env-file $HOME/containers-prepare-parameters.yaml

        export IP=10.0.0.4
        export VIP=10.0.0.5
        export NETMASK=24
        export GATEWAY=10.0.0.254
        export INTERFACE=eth0

        cat <<EOF > $HOME/standalone_parameters.yaml
        parameter_defaults:
          CloudName: $IP
          # default gateway
          ControlPlaneStaticRoutes:
            - ip_netmask: 0.0.0.0/0
              next_hop: $GATEWAY
              default: true
          Debug: true
          DeploymentUser: $USER
          DnsServers:
            - 10.38.5.26 # TODO:FIXME: Check the fact having this information
            - 10.0.0.253
          # needed for vip & pacemaker
          KernelIpNonLocalBind: 1
          DockerInsecureRegistryAddress:
            - $IP:8787
          NeutronPublicInterface: $INTERFACE
          # domain name used by the host
          CloudDomain: localdomain
          NeutronDnsDomain: localdomain
          # re-use ctlplane bridge for public net, defined in the standalone
          # net config (do not change unless you know what you are doing)
          NeutronBridgeMappings: datacentre:br-ctlplane
          NeutronPhysicalBridge: br-ctlplane
          # enable to force metadata for public net
          #NeutronEnableForceMetadata: true
          StandaloneEnableRoutedNetworks: false
          StandaloneHomeDir: $HOME
          InterfaceLocalMtu: 1342
          # Needed if running in a VM, not needed if on baremetal
          NovaComputeLibvirtType: qemu
          NtpServer: 10.11.160.238
          ChronyAclRules:
            - allow 10.0.0.0/24
        EOF

        # If there are deployment issues related to chrony
        # make sure the following works.
        # [root@nova-compute ~]# cat /etc/chrony.conf
        # # Do not manually edit this file.
        # # Managed by ansible-role-chrony
        # server 10.11.160.238 iburst minpoll 6 maxpoll 10
        # bindcmdaddress 127.0.0.1
        # bindcmdaddress ::1
        # allow 10.0.0.0/24
        # driftfile /var/lib/chrony/drift
        # logdir /var/log/chrony
        # rtcsync
        # makestep 1.0 3
        # [root@nova-compute ~]# chronyc sources
        # MS Name/IP address         Stratum Poll Reach LastRx Last sample
        # ===============================================================================
        # ^* 10.11.160.238                 2   6   377    63    +10us[  +33us] +/- 9708us
      args:
        executable: /bin/bash
      become: true
      become_method: su
      become_user: stack
      register: _result
      changed_when: "_result.rc == 0"

    - name: Create the observability templates
      ansible.builtin.shell: |
        set -o pipefail
        # --- create the standalone-osp-telemetry.yaml so that CloudOps services are enabled
        cat <<EOF > $HOME/standalone-osp-telemetry.yaml
        resource_registry:
          OS::TripleO::Services::AodhApi: /usr/share/openstack-tripleo-heat-templates/deployment/aodh/aodh-api-container-puppet.yaml
          OS::TripleO::Services::AodhEvaluator: /usr/share/openstack-tripleo-heat-templates/deployment/aodh/aodh-evaluator-container-puppet.yaml
          OS::TripleO::Services::AodhListener: /usr/share/openstack-tripleo-heat-templates/deployment/aodh/aodh-listener-container-puppet.yaml
          OS::TripleO::Services::AodhNotifier: /usr/share/openstack-tripleo-heat-templates/deployment/aodh/aodh-notifier-container-puppet.yaml
          OS::TripleO::Services::CeilometerAgentCentral: /usr/share/openstack-tripleo-heat-templates/deployment/ceilometer/ceilometer-agent-central-container-puppet.yaml
          OS::TripleO::Services::CeilometerAgentNotification: /usr/share/openstack-tripleo-heat-templates/deployment/ceilometer/ceilometer-agent-notification-container-puppet.yaml
          OS::TripleO::Services::ComputeCeilometerAgent: /usr/share/openstack-tripleo-heat-templates/deployment/ceilometer/ceilometer-agent-compute-container-puppet.yaml
          OS::TripleO::Services::GnocchiApi: /usr/share/openstack-tripleo-heat-templates/deployment/gnocchi/gnocchi-api-container-puppet.yaml
          OS::TripleO::Services::GnocchiMetricd: /usr/share/openstack-tripleo-heat-templates/deployment/gnocchi/gnocchi-metricd-container-puppet.yaml
          OS::TripleO::Services::GnocchiStatsd: /usr/share/openstack-tripleo-heat-templates/deployment/gnocchi/gnocchi-statsd-container-puppet.yaml
          OS::TripleO::Services::Redis: /usr/share/openstack-tripleo-heat-templates/deployment/database/redis-container-puppet.yaml

          # NOTE: this is the same as the default right now. For the real deployment we should use rsyslog-container-puppet.yaml and configure amqp1 or elasticsearch
          OS::TripleO::Services::Rsyslog: /usr/share/openstack-tripleo-heat-templates/deployment/logging/rsyslog-baremetal-ansible.yaml
        EOF

        cat <<EOF > $HOME/enable-osp-telemetry.yaml
        parameter_defaults:
          NotificationDriver: 'messagingv2'
          # uncomment the next two lines when using ceph
          # GnocchiRbdPoolName: 'metrics'
          # GnocchiBackend: 'rbd'
          GnocchiArchivePolicy: 'high'
          CeilometerEnableGnocchi: true
          ManagePipeline: true
          EventPipelinePublishers:
            - gnocchi://
          PipelinePublishers:
            - gnocchi://
        EOF

      args:
        executable: /bin/bash
      become: true
      become_method: su
      become_user: stack
      register: _result
      changed_when: "_result.rc == 0"

    - name: Run the ooo deployment
      block:
        - name: Run the ooo standalone deployment 1st time
          ansible.builtin.shell: |
            set -o pipefail

            # Run this as the stack user

            export IP=10.0.0.4
            export VIP=10.0.0.5
            export NETMASK=24
            export GATEWAY=10.0.0.254
            export INTERFACE=eth0

            sudo openstack tripleo deploy \
              --templates \
              --local-ip=$IP/$NETMASK \
              --control-virtual-ip=$VIP \
              -e /usr/share/openstack-tripleo-heat-templates/environments/standalone/standalone-tripleo.yaml \
              -r /usr/share/openstack-tripleo-heat-templates/roles/Standalone.yaml \
              -e $HOME/containers-prepare-parameters.yaml \
              -e $HOME/standalone_parameters.yaml \
              -e $HOME/standalone-osp-telemetry.yaml \
              -e $HOME/enable-osp-telemetry.yaml \
              -e /usr/share/openstack-tripleo-heat-templates/environments/low-memory-usage.yaml \
              --output-dir $HOME

            # The result of the CLI execution will be in /home/stack/ansible.log
          args:
            executable: /bin/bash
          become: true
          become_method: su
          become_user: stack
          async: 45
          poll: 0
          register: ooo_sleeper
          changed_when: true

        - name: Check on an async task
          ansible.builtin.async_status:
            jid: "{{ ooo_sleeper.ansible_job_id }}"
          become: true
          become_method: su
          become_user: stack
          register: job_result
          until: job_result.finished
          retries: 10
          delay: 60

      rescue:
        - name: Run the ooo standalone deployment 2nd time
          ansible.builtin.shell: |
            set -o pipefail

            # Run this as the stack user

            export IP=10.0.0.4
            export VIP=10.0.0.5
            export NETMASK=24
            export GATEWAY=10.0.0.254
            export INTERFACE=eth0

            sudo openstack tripleo deploy \
              --templates \
              --local-ip=$IP/$NETMASK \
              --control-virtual-ip=$VIP \
              -e /usr/share/openstack-tripleo-heat-templates/environments/standalone/standalone-tripleo.yaml \
              -r /usr/share/openstack-tripleo-heat-templates/roles/Standalone.yaml \
              -e $HOME/containers-prepare-parameters.yaml \
              -e $HOME/standalone_parameters.yaml \
              -e $HOME/standalone-osp-telemetry.yaml \
              -e $HOME/enable-osp-telemetry.yaml \
              -e /usr/share/openstack-tripleo-heat-templates/environments/low-memory-usage.yaml \
              --output-dir $HOME

            # The result of the CLI execution will be in /home/stack/ansible.log
          args:
            executable: /bin/bash
          become: true
          become_method: su
          become_user: stack
          changed_when: true


    - name: "Make sure the OOO deployment is finished before continue: {{ kubeinit_deployment_node_name }}"
      ansible.builtin.shell: |
        set -o pipefail

        openstack endpoint list --os-cloud standalone | grep regionOne | head -n 1 || true
      args:
        executable: /bin/bash
      become: true
      become_method: su
      become_user: stack
      register: _result
      retries: 5
      delay: 120
      until: "'regionOne' in _result.stdout"
      changed_when: "_result.rc == 0"
  delegate_to: "{{ kubeinit_deployment_node_name }}"
